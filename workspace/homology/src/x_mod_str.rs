use delegate::delegate;
use yui_core::{Ring, RingOps, IndexList};
use yui_lin_comb::{Gen, LinComb};
use yui_matrix::sparse::{SpVec, Trans};

use crate::{DisplayForGrid, RModStr, SimpleRModStr};

// Represents a free R-module generated by a finite set of elements in X. 

#[derive(Clone)]
pub struct XModStr<X, R>
where 
    X: Gen,
    R: Ring, for<'x> &'x R: RingOps<R>
{
    gens: IndexList<X>,
    inner: SimpleRModStr<R>
}

impl<X, R> XModStr<X, R>
where X: Gen, R: Ring, for<'x> &'x R: RingOps<R> {
    pub fn new(gens: IndexList<X>, rank: usize, tors: Vec<R>, trans: Option<Trans<R>>) -> Self { 
        if let Some(t) = &trans { 
            assert_eq!(t.src_dim(), gens.len());
            assert_eq!(t.tgt_dim(), rank + tors.len());
        } else { 
            assert_eq!(gens.len(), rank + tors.len());
        }

        let inner = SimpleRModStr::new(rank, tors, trans);
        Self::from(gens, inner)
    }

    pub fn from(gens: IndexList<X>, inner: SimpleRModStr<R>) -> Self { 
        if let Some(t) = inner.trans() { 
            assert_eq!(gens.len(), t.src_dim());
        }
        Self { gens, inner }
    }

    pub fn free<Itr>(gens: Itr) -> Self 
    where Itr: IntoIterator<Item = X> {
        let gens = gens.into_iter().collect::<IndexList<X>>();
        let r = gens.len();

        Self::new(gens, r, vec![], Some(Trans::id(r))) 
    }

    pub fn zero() -> Self { 
        Self::new(IndexList::new(), 0, vec![], Some(Trans::zero()))
    }

    pub fn trans(&self) -> Option<&Trans<R>> { 
        self.inner.trans()
    }

    // TODO rename to `raw_gens`
    pub fn gens(&self) -> &IndexList<X> { 
        &self.gens
    }

    // MEMO Panicking is not good. 
    // Maybe this should return Option<..>, 
    // and create XFreeModStr that unwraps it. 

    pub fn gen_chain(&self, i: usize) -> LinComb<X, R> { 
        if self.trans().is_none() { 
            panic!()
        }

        let n = self.dim();
        let v = SpVec::unit(n, i);

        self.as_chain(&v)
    }

    pub fn vectorize(&self, z: &LinComb<X, R>) -> SpVec<R> {
        let Some(t) = self.trans() else { 
            panic!()
        };

        let n = self.gens.len();
        let v = SpVec::generate(n, |set| { 
            for (x, a) in z.iter() { 
                let Some(i) = self.gens.index_of(x) else { 
                    panic!("{x} not found in generators: {:?}", &self.gens);
                };
                set(i, a.clone());
            }
        });

        t.forward(&v)
    }

    pub fn as_chain(&self, v: &SpVec<R>) -> LinComb<X, R> {
        let Some(t) = self.trans() else { 
            panic!()
        };

        assert_eq!(v.dim(), self.dim());

        let v = t.backward(v);

        LinComb::from_iter( v.iter().map(|(i, a)| 
            (self.gens[i].clone(), a.clone())
        ) )
    }

    pub fn compose(&self, other: &SimpleRModStr<R>) -> Self { 
        let inner = self.inner.compose(other);
        Self::from(self.gens.clone(), inner)
    }
}

impl<X, R> Default for XModStr<X, R>
where X: Gen, R: Ring, for<'x> &'x R: RingOps<R> {
    fn default() -> Self {
        Self::zero()
    }
}

impl<X, R> RModStr for XModStr<X, R>
where X: Gen, R: Ring, for<'x> &'x R: RingOps<R> {
    type R = R;

    delegate! { 
        to self.inner { 
            fn rank(&self) -> usize;
            fn tors(&self) -> &Vec<Self::R>;
        }
    }
}

impl<X, R> DisplayForGrid for XModStr<X, R>
where X: Gen, R: Ring, for<'x> &'x R: RingOps<R> {
    fn display_for_grid(&self) -> String {
        self.math_symbol()
    }
}

#[cfg(test)]
mod tests { 
    use yui_lin_comb::Free;

    use super::*;

    type X = Free<i32>;
    fn e(i: isize) -> X { 
        X::from(i as i32)
    }
    
    #[test]
    fn vectorize() { 
        let s = XModStr::free([e(0), e(1), e(2)]);
        
        let x = LinComb::from(e(0));
        let y = LinComb::from(e(1));
        let z = LinComb::from(e(2));

        let v = s.vectorize(&x);
        assert_eq!(v, SpVec::unit(3, 0));

        let v = s.vectorize(&(&x - &y * 2 + &z * 3));
        assert_eq!(v, SpVec::from(vec![1,-2,3]));
    }
        
    #[test]
    fn as_chain() { 
        let s = XModStr::free([e(0), e(1), e(2)]);
        
        let x = LinComb::from(e(0));
        let y = LinComb::from(e(1));
        let z = LinComb::from(e(2));

        let v = SpVec::from(vec![1, 2, -3]);
        let w = s.as_chain(&v);

        assert_eq!(w, &x + &y * 2 - &z * 3);
    }
}